@model GlobeAuction.Models.BidderRegistrationViewModel
@using CaptchaMvc.HtmlHelpers

@{
    ViewBag.Title = "Register";
}

<h2>Register for the Auction</h2>
<br />

@if (!Request.IsAuthenticated && !Constants.IsTicketPurchaseEnabled)
{
    <div class="alert alert-info">
        Registration is not currently open.
    </div>
}
else
{
    if (Model.ShowRegistrationSuccessMessage)
    {
        <div class="alert alert-success">
            Successfully registered <b>@Model.FullNameJustRegistered</b> for the auction.  Paddle number is:

            <h3>@Model.BidderNumberJustRegistered</h3>

            @if (Model.RaffleTicketNumbersCreated.Any())
            {
                <p>
                    <br />
                    <h4>
                        Raffle ticket numbers are:
                    </h4>
                    <ul>
                        @foreach (var raffleDescription in Model.RaffleTicketNumbersCreated)
                        {
                            <li>
                                @raffleDescription
                            </li>
                        }
                    </ul>
                </p><br />
            }

            You can continue to entering more registrations below.  Please take note of your bid number if you
            are registering right before or during the auction.  An email has also been sent to you with your bid number for your records.
        </div>
    }
    <p>
        You will receive one bid paddle number for each registration you submit here and you will use the paddle number to bid on and purchase items.
        If you are inviting friends or other family that want their own bid paddle number then please submit a separate registration for them.
    </p>
    <br />

    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    <div class="panel panel-info">
        <div class="panel-heading">
            <strong>Have a Promo Code?</strong>
        </div>
        <div class="panel-body">
            @using (Html.BeginForm("Register", "Bidders", FormMethod.Get, new { @class = "form-inline" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-group">
                    <div class="input-group">
                        <input type="text" class="form-control" id="promoCode" name="promoCode" placeholder="Promo Code">
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">Apply Promo Code</button>
            }
        </div>
    </div>

    using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Contact Information</h4>
    <hr />
    <div class="form-group">
        @Html.MyLabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.MyLabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.MyLabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.MyLabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.MyLabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10 col-md-offset-2">
            @Html.Captcha(6)
        </div>
    </div>


    <br />

    <h4>Student(s) Information</h4>
    <hr />
    <div class="row form-group">
        <div class="col-md-2"></div>
        <div class="col-md-10">@Html.Label("Homeroom Teacher")</div>
    </div>
    @for (var i = 0; i < Model.Students.Count; i++)
    {
        <div class="row form-group">
            <div class="control-label col-md-2">Child @(i + 1)</div>
            <div class="col-md-10">
                @Html.DropDownListFor(m => Model.Students[i].HomeroomTeacher, (IEnumerable<SelectListItem>)ViewBag.TeacherNames,
                                                             "Select Child's Homeroom Teacher", new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
    }
    <br />

    <h4>Auction Guest(s) Information</h4>
    <hr />
    <div class="row form-group">
        <div class="col-md-2"></div>
        <div class="col-md-2">@Html.Label("First Name")</div>
        <div class="col-md-2">@Html.Label("Last Name")</div>
        <div class="col-md-6">@Html.Label("Ticket Type")</div>
    </div>
    @for (var i = 0; i < Model.AuctionGuests.Count; i++)
    {
        <div class="row form-group">
            <div class="control-label col-md-2">Guest @(i + 1)</div>
            <div class="col-md-2">
                @Html.EditorFor(m => Model.AuctionGuests[i].FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => Model.AuctionGuests[i].FirstName, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2">
                @Html.EditorFor(m => Model.AuctionGuests[i].LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => Model.AuctionGuests[i].LastName, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6">
                @Html.DropDownListFor(model => Model.AuctionGuests[i].TicketType, (IEnumerable<SelectListItem>)ViewBag.TicketTypes,
                                                             "Select a Ticket Type", new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => Model.AuctionGuests[i].TicketType, "", new { @class = "text-danger" })
            </div>
        </div>
    }
    <br />

    @if (Model.ItemPurchases != null && Model.ItemPurchases.Any())
    {
        <h4>Raffle Tickets & Fund A Project Donations</h4>
        <hr />
        <p>
            Raffle ticket options are listed below and available for purchase. We are also accepting Fund A Project donations.
            Enter the quantity you want, or leave blank if you want to purchase when the Auction is live. Raffle winners will be drawn at 8:00 on May 17 and notified via email.
        </p>
        <br />
        <div class="row form-group">
            <div class="col-md-2"></div>
            <div class="col-md-6">@Html.Label("Raffle Package")</div>
            <div class="col-md-2">@Html.Label("Price")</div>
            <div class="col-md-2">@Html.Label("Quantity")</div>
        </div>
        for (var i = 0; i < Model.ItemPurchases.Count; i++)
        {
            @Html.HiddenFor(m => Model.ItemPurchases[i].StoreItemId)
            @Html.HiddenFor(m => Model.ItemPurchases[i].DonationItemValue)
            @Html.HiddenFor(m => Model.ItemPurchases[i].Description)
            @Html.HiddenFor(m => Model.ItemPurchases[i].ExpirationDate)
            @Html.HiddenFor(m => Model.ItemPurchases[i].HasUnlimitedQuantity)
            @Html.HiddenFor(m => Model.ItemPurchases[i].ImageUrl)
            @Html.HiddenFor(m => Model.ItemPurchases[i].Price)
            @Html.HiddenFor(m => Model.ItemPurchases[i].QuantityAvailable)
            @Html.HiddenFor(m => Model.ItemPurchases[i].QuantityPurchased)
            @Html.HiddenFor(m => Model.ItemPurchases[i].Restrictions)
            @Html.HiddenFor(m => Model.ItemPurchases[i].Title)

            <div class="row form-group">
                <div class="col-md-2">
                    @if (!string.IsNullOrEmpty(Model.ItemPurchases[i].ImageUrl))
                    {
                        <img src="@Url.Content(Model.ItemPurchases[i].ImageUrl)" alt="Image" style="max-width: calc(100% - 20px);" />
                    }
                </div>
                <div class="col-md-6">
                    <b>@Html.DisplayFor(m => Model.ItemPurchases[i].Title)</b>
                    <br />
                    @Html.DisplayFor(m => Model.ItemPurchases[i].Description)
                </div>
                <div class="col-md-2">
                    @Html.DisplayFor(m => Model.ItemPurchases[i].Price)
                </div>
                <div class="col-md-2">
                    @Html.EditorFor(m => Model.ItemPurchases[i].QuantityPurchased, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => Model.ItemPurchases[i].QuantityPurchased, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        <br />
    }
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            @if (Request.IsAuthenticated && User.IsInRole(GlobeAuction.Models.AuctionRoles.CanEditBidders))
            {
                <input type="submit" name="submitButton" value="Register and Mark Paid (Cash)" class="btn btn-primary btn-lg" />
                <input type="submit" name="submitButton" value="Register and Mark Paid (Check)" class="btn btn-primary btn-lg" />
                <input type="submit" name="submitButton" value="Register and Mark Paid (PayPal)" class="btn btn-primary btn-lg" />
                <br /><br />
                <input type="submit" name="submitButton" value="Register Now (for Myself)" class="btn btn-default btn-sm" />
                <p>
                    <br />
                    NOTE: "Register and Mark Paid" buttons only visible to logged-in volunteers
                </p>
            }
            else
            {
                <input type="submit" name="submitButton" value="Submit and Proceed to Registration" class="btn btn-primary btn-lg" />
            }
        </div>
    </div>
</div>
    }
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script type="text/javascript">
    var $guestFirstName = $("#AuctionGuests_0__FirstName");
    var $guestLastName = $("#AuctionGuests_0__LastName");

    $("#FirstName").keyup(function () {
        $guestFirstName.val(this.value);
    });
    $("#FirstName").blur(function () {
        $guestFirstName.val(this.value);
    });

    $("#LastName").keyup(function () {
        $guestLastName.val(this.value);
    });
    $("#LastName").blur(function () {
        $guestLastName.val(this.value);
    });

    $("#AuctionGuests_0__TicketType").prop('selectedIndex', 0);
</script>