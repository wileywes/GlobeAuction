@model IEnumerable<GlobeAuction.Models.StoreItemsListViewModel>

<link rel="stylesheet" type="text/css" href="~/DataTables/datatables.min.css" />
<script type="text/javascript" src="~/DataTables/datatables.min.js"></script>

@{
    ViewBag.Title = "Store Items";
}

<h2>Store Items</h2>

<p>
    <ul class="list-inline">
        <li>@Html.ActionLink("Create New", "Create")</li>
        <li><a href="/store" target="_blank">See the Store</a></li>
        <li>@Html.ActionLink("See All Purchases", "Purchases")</li>
        <li>@Html.ActionLink("See Raffle Purchases", "RafflePurchases")</li>
    </ul>
</p>

@using (Html.BeginForm("SubmitSelectedStoreItems", "StoreItems", FormMethod.Post, new { id = "submitSelectedStoreItemsForm", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    @Html.Hidden("storeItemIdForUpload");
    @Html.Hidden("storeItemsAction");
    @Html.Hidden("selectedStoreItemIds");

    <table class="table table-striped table-bordered" id="storeItemsTable">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.StoreItemId)
                </th>
                <th>
                    Image
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Title)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Description)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Price)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Quantity)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PaidPurchaseCount)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.UnpaidPurchaseCount)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.IsRaffleTicket)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CanPurchaseInBidderRegistration)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CanPurchaseInAuctionCheckout)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CanPurchaseInStore)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.OnlyVisibleToAdmins)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.StoreItemId)
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(item.ImageUrl))
                        {
                            <img src="@Url.Content(item.ImageUrl)" alt="Image" width="100" />
                        }
                        else
                        {
                            <input type="file" name="files" id="file@(item.StoreItemId)" onchange="javascript:uploadImage(@(item.StoreItemId));" />
                        }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)

                        @if (item.IsBundleParent)
                        {
                            <br /><br />
                            <b>Components:</b>
                            <table>
                                <tr>
                                    <td>@Html.DisplayNameFor(model => model.StoreItemId)</td>
                                    <td>Title</td>
                                    <td>Quantity</td>
                                    <td>Price</td>
                                </tr>
                                @foreach (var comp in item.BundleComponents)
                                {
                                    <tr>
                                        <td>
                                            @Html.DisplayFor(m => comp.StoreItemId)
                                        </td>
                                        <td>
                                            @(Model.First(i => i.StoreItemId == comp.StoreItemId).Title)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(m => comp.Quantity)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(m => comp.ComponentUnitPrice)
                                        </td>
                                    </tr>
                                }
                            </table>
                        }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Price)
                    </td>
                    <td>
                        @if (item.IsRaffleTicket || item.HasUnlimitedQuantity)
                        {
                            <span>Unlimited</span>
                        }
                        else
                        {
                            @Html.DisplayFor(modelItem => item.Quantity)
                        }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PaidPurchaseCount)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.UnpaidPurchaseCount)
                    </td>
                    <td>
                        @(item.IsRaffleTicket ? "Yes" : "No")
                    </td>
                    <td>
                        @(item.CanPurchaseInBidderRegistration ? "Yes" : "No")
                    </td>
                    <td>
                        @(item.CanPurchaseInAuctionCheckout ? "Yes" : "No")
                    </td>
                    <td>
                        @(item.CanPurchaseInStore ? "Yes" : "No")
                    </td>
                    <td>
                        @(item.OnlyVisibleToAdmins ? "Yes" : "No")
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = item.StoreItemId }) |
                        @Html.ActionLink("Details", "Details", new { id = item.StoreItemId }) |
                        @Html.ActionLink("Delete", "Delete", new { id = item.StoreItemId })
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


<script type="text/javascript">

    //expand the page space
    $("#bodyContainer").removeClass("container");

    function getSelectedRows(data) {
        var ids = '';
        for (var i = 0; i < data.length; i++) {
            ids += data[i][0] + ',';
        }
        return ids.trimRight(',');
    }

    function uploadImage(storeItemId) {
        $("#storeItemIdForUpload").val(storeItemId);
        $("#storeItemsAction").val("UploadImage");
        $('#submitSelectedStoreItemsForm').submit();
    }

    $(document).ready(function () {
        $('#storeItemsTable').dataTable({
            "iDisplayLength": 100,
            dom: 'Bfrtip',
            stateSave: true,
            buttons: [
                {
                    extend: 'excelHtml5',
                    title: 'Export'
                },
                {
                    text: 'Move to Auction',
                    action: function (e, dt, node, config) {
                        var data = dt.rows({ selected: true }).data();
                        if (data.length == 0) {
                            alert('You must select rows for this action.');
                        }
                        else {
                            $("#selectedStoreItemIds").val(getSelectedRows(data));
                            $("#storeItemsAction").val("MoveToAuction");
                            $('#submitSelectedStoreItemsForm').submit();
                        }
                    }
                },
                {
                    text: 'Show In Store',
                    action: function (e, dt, node, config) {
                        var data = dt.rows({ selected: true }).data();
                        if (data.length == 0) {
                            alert('You must select rows for this action.');
                        }
                        else {
                            $("#selectedStoreItemIds").val(getSelectedRows(data));
                            $("#storeItemsAction").val("ShowInStore");
                            $('#submitSelectedStoreItemsForm').submit();
                        }
                    }
                },
                {
                    text: 'End Raffle Purchasing',
                    action: function (e, dt, node, config) {
                        $("#storeItemsAction").val("EndRafflePurchasing");
                        $('#submitSelectedStoreItemsForm').submit();
                    }
                }
            ],
            select: {
                style: 'os'
            }
        });
    });
</script>
